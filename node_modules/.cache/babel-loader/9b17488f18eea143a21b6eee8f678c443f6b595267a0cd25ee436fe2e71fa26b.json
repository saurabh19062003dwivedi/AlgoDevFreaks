{"ast":null,"code":"/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Encoding} Encoding\r\n * @typedef {import('micromark-util-types').Value} Value\r\n */\n\n/**\r\n * @callback Preprocessor\r\n * @param {Value} value\r\n * @param {Encoding | null | undefined} [encoding]\r\n * @param {boolean | null | undefined} [end=false]\r\n * @returns {Array<Chunk>}\r\n */\n\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\r\n * @returns {Preprocessor}\r\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding);\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === codes.byteOrderMarker) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === codes.lf && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(codes.carriageReturnLineFeed);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(codes.carriageReturn);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case codes.nul:\n            {\n              chunks.push(codes.replacementCharacter);\n              column++;\n              break;\n            }\n          case codes.ht:\n            {\n              next = Math.ceil(column / constants.tabSize) * constants.tabSize;\n              chunks.push(codes.horizontalTab);\n              while (column++ < next) chunks.push(codes.virtualSpace);\n              break;\n            }\n          case codes.lf:\n            {\n              chunks.push(codes.lineFeed);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(codes.carriageReturn);\n      if (buffer) chunks.push(buffer);\n      chunks.push(codes.eof);\n    }\n    return chunks;\n  }\n}","map":{"version":3,"names":["codes","constants","search","preprocess","column","buffer","start","atCarriageReturn","preprocessor","value","encoding","end","chunks","match","next","startPosition","endPosition","code","toString","charCodeAt","byteOrderMarker","undefined","length","lastIndex","exec","index","slice","lf","push","carriageReturnLineFeed","carriageReturn","nul","replacementCharacter","ht","Math","ceil","tabSize","horizontalTab","virtualSpace","lineFeed","eof"],"sources":["C:/Users/saura/Desktop/AlgoDevFreaks/node_modules/micromark/dev/lib/preprocess.js"],"sourcesContent":["/**\r\n * @typedef {import('micromark-util-types').Chunk} Chunk\r\n * @typedef {import('micromark-util-types').Code} Code\r\n * @typedef {import('micromark-util-types').Encoding} Encoding\r\n * @typedef {import('micromark-util-types').Value} Value\r\n */\r\n\r\n/**\r\n * @callback Preprocessor\r\n * @param {Value} value\r\n * @param {Encoding | null | undefined} [encoding]\r\n * @param {boolean | null | undefined} [end=false]\r\n * @returns {Array<Chunk>}\r\n */\r\n\r\nimport {codes} from 'micromark-util-symbol/codes.js'\r\nimport {constants} from 'micromark-util-symbol/constants.js'\r\n\r\nconst search = /[\\0\\t\\n\\r]/g\r\n\r\n/**\r\n * @returns {Preprocessor}\r\n */\r\nexport function preprocess() {\r\n  let column = 1\r\n  let buffer = ''\r\n  /** @type {boolean | undefined} */\r\n  let start = true\r\n  /** @type {boolean | undefined} */\r\n  let atCarriageReturn\r\n\r\n  return preprocessor\r\n\r\n  /** @type {Preprocessor} */\r\n  function preprocessor(value, encoding, end) {\r\n    /** @type {Array<Chunk>} */\r\n    const chunks = []\r\n    /** @type {RegExpMatchArray | null} */\r\n    let match\r\n    /** @type {number} */\r\n    let next\r\n    /** @type {number} */\r\n    let startPosition\r\n    /** @type {number} */\r\n    let endPosition\r\n    /** @type {Code} */\r\n    let code\r\n\r\n    // @ts-expect-error `Buffer` does allow an encoding.\r\n    value = buffer + value.toString(encoding)\r\n    startPosition = 0\r\n    buffer = ''\r\n\r\n    if (start) {\r\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\r\n      if (value.charCodeAt(0) === codes.byteOrderMarker) {\r\n        startPosition++\r\n      }\r\n\r\n      start = undefined\r\n    }\r\n\r\n    while (startPosition < value.length) {\r\n      search.lastIndex = startPosition\r\n      match = search.exec(value)\r\n      endPosition =\r\n        match && match.index !== undefined ? match.index : value.length\r\n      code = value.charCodeAt(endPosition)\r\n\r\n      if (!match) {\r\n        buffer = value.slice(startPosition)\r\n        break\r\n      }\r\n\r\n      if (\r\n        code === codes.lf &&\r\n        startPosition === endPosition &&\r\n        atCarriageReturn\r\n      ) {\r\n        chunks.push(codes.carriageReturnLineFeed)\r\n        atCarriageReturn = undefined\r\n      } else {\r\n        if (atCarriageReturn) {\r\n          chunks.push(codes.carriageReturn)\r\n          atCarriageReturn = undefined\r\n        }\r\n\r\n        if (startPosition < endPosition) {\r\n          chunks.push(value.slice(startPosition, endPosition))\r\n          column += endPosition - startPosition\r\n        }\r\n\r\n        switch (code) {\r\n          case codes.nul: {\r\n            chunks.push(codes.replacementCharacter)\r\n            column++\r\n\r\n            break\r\n          }\r\n\r\n          case codes.ht: {\r\n            next = Math.ceil(column / constants.tabSize) * constants.tabSize\r\n            chunks.push(codes.horizontalTab)\r\n            while (column++ < next) chunks.push(codes.virtualSpace)\r\n\r\n            break\r\n          }\r\n\r\n          case codes.lf: {\r\n            chunks.push(codes.lineFeed)\r\n            column = 1\r\n\r\n            break\r\n          }\r\n\r\n          default: {\r\n            atCarriageReturn = true\r\n            column = 1\r\n          }\r\n        }\r\n      }\r\n\r\n      startPosition = endPosition + 1\r\n    }\r\n\r\n    if (end) {\r\n      if (atCarriageReturn) chunks.push(codes.carriageReturn)\r\n      if (buffer) chunks.push(buffer)\r\n      chunks.push(codes.eof)\r\n    }\r\n\r\n    return chunks\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}