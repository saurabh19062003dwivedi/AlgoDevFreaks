{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-from-markdown').Options} Options\r\n */\n\nimport { fromMarkdown } from 'mdast-util-from-markdown';\n\n/**\r\n * @this {import('unified').Processor}\r\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\r\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = doc => {\n    // Assume options.\n    const settings = /** @type {Options} */this.data('settings');\n    return fromMarkdown(doc, Object.assign({}, settings, options, {\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: this.data('micromarkExtensions') || [],\n      mdastExtensions: this.data('fromMarkdownExtensions') || []\n    }));\n  };\n  Object.assign(this, {\n    Parser: parser\n  });\n}","map":{"version":3,"names":["fromMarkdown","remarkParse","options","parser","doc","settings","data","Object","assign","extensions","mdastExtensions","Parser"],"sources":["C:/Users/saura/Desktop/AlgoDevFreaks/node_modules/remark-parse/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast-util-from-markdown').Options} Options\r\n */\r\n\r\nimport {fromMarkdown} from 'mdast-util-from-markdown'\r\n\r\n/**\r\n * @this {import('unified').Processor}\r\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\r\n */\r\nexport default function remarkParse(options) {\r\n  /** @type {import('unified').ParserFunction<Root>} */\r\n  const parser = (doc) => {\r\n    // Assume options.\r\n    const settings = /** @type {Options} */ (this.data('settings'))\r\n\r\n    return fromMarkdown(\r\n      doc,\r\n      Object.assign({}, settings, options, {\r\n        // Note: these options are not in the readme.\r\n        // The goal is for them to be set by plugins on `data` instead of being\r\n        // passed by users.\r\n        extensions: this.data('micromarkExtensions') || [],\r\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\r\n      })\r\n    )\r\n  }\r\n\r\n  Object.assign(this, {Parser: parser})\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAAQA,YAAY,QAAO,0BAA0B;;AAErD;AACA;AACA;AACA;AACA,eAAe,SAASC,WAAWA,CAACC,OAAO,EAAE;EAC3C;EACA,MAAMC,MAAM,GAAIC,GAAG,IAAK;IACtB;IACA,MAAMC,QAAQ,GAAG,sBAAwB,IAAI,CAACC,IAAI,CAAC,UAAU,CAAE;IAE/D,OAAON,YAAY,CACjBI,GAAG,EACHG,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,QAAQ,EAAEH,OAAO,EAAE;MACnC;MACA;MACA;MACAO,UAAU,EAAE,IAAI,CAACH,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE;MAClDI,eAAe,EAAE,IAAI,CAACJ,IAAI,CAAC,wBAAwB,CAAC,IAAI;IAC1D,CAAC,CACH,CAAC;EACH,CAAC;EAEDC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAE;IAACG,MAAM,EAAER;EAAM,CAAC,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}