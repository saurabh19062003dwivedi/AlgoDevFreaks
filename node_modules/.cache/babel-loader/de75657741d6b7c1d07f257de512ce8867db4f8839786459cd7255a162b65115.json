{"ast":null,"code":"// import axios from \"axios\";\n\n// // 1. बेस URL .env से लें, या डिफ़ॉल्ट के रूप में HTTP://localhost:4000\n// const BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:4000\";\n\n// const axiosInstance = axios.create({\n//   baseURL: BASE_URL, // .env वैल्यू या डिफ़ॉल्ट URL\n//   // headers: {\n//   //   \"Content-Type\": \"application/json\",\n//   // },\n//   withCredentials: true, // CORS के लिए आवश्यक\n//   timeout: 10000, // 10 सेकंड का टाइमआउट\n// });\n\n// // 2. बेहतर एरर हैंडलिंग\n// export const apiConnector = async (method, url, bodyData, headers, params) => {\n//   try {\n//     const response = await axiosInstance({\n//       method: method.toUpperCase(),\n//       url: url,\n//       data: bodyData ,\n//       headers: headers || {},\n//       params: params ,\n//     });\n//     return response;\n//   } catch (error) {\n//     console.error(\"API Error:\", error);\n//     throw error; // कॉलिंग कंपोनेंट में हैंडल करें\n//   }\n// };\nimport axios from \"axios\";\nimport { BASE_URL } from \"../utils/\";\n\n// Axios instance\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  withCredentials: true,\n  timeout: 10000\n});\n\n// API connector function\nexport const apiConnector = async (method, url, bodyData, headers = {}, params = {}) => {\n  try {\n    const isFormData = bodyData instanceof FormData;\n    const response = await axiosInstance({\n      method: method.toUpperCase(),\n      url: url,\n      data: bodyData,\n      headers: {\n        ...headers,\n        ...(isFormData ? {} : {\n          \"Content-Type\": \"application/json\"\n        })\n      },\n      params: params\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.log(\"API Error: \", error);\n    return {\n      success: false,\n      message: (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Something went wrong\"\n    };\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","axiosInstance","create","baseURL","withCredentials","timeout","apiConnector","method","url","bodyData","headers","params","isFormData","FormData","response","toUpperCase","data","error","_error$response","_error$response$data","console","log","success","message"],"sources":["C:/Users/saura/Desktop/AlgoDevFreaks/src/services/apiconnector.js"],"sourcesContent":["// import axios from \"axios\";\n\n// // 1. बेस URL .env से लें, या डिफ़ॉल्ट के रूप में HTTP://localhost:4000\n// const BASE_URL = process.env.REACT_APP_API_BASE_URL || \"http://localhost:4000\";\n\n// const axiosInstance = axios.create({\n//   baseURL: BASE_URL, // .env वैल्यू या डिफ़ॉल्ट URL\n//   // headers: {\n//   //   \"Content-Type\": \"application/json\",\n//   // },\n//   withCredentials: true, // CORS के लिए आवश्यक\n//   timeout: 10000, // 10 सेकंड का टाइमआउट\n// });\n\n// // 2. बेहतर एरर हैंडलिंग\n// export const apiConnector = async (method, url, bodyData, headers, params) => {\n//   try {\n//     const response = await axiosInstance({\n//       method: method.toUpperCase(),\n//       url: url,\n//       data: bodyData ,\n//       headers: headers || {},\n//       params: params ,\n//     });\n//     return response;\n//   } catch (error) {\n//     console.error(\"API Error:\", error);\n//     throw error; // कॉलिंग कंपोनेंट में हैंडल करें\n//   }\n// };\nimport axios from \"axios\";\nimport { BASE_URL } from \"../utils/\";\n\n// Axios instance\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL,\n  withCredentials: true,\n  timeout: 10000,\n});\n\n// API connector function\nexport const apiConnector = async (\n  method,\n  url,\n  bodyData,\n  headers = {},\n  params = {}\n) => {\n  try {\n    const isFormData = bodyData instanceof FormData;\n\n    const response = await axiosInstance({\n      method: method.toUpperCase(),\n      url: url,\n      data: bodyData,\n      headers: {\n        ...headers,\n        ...(isFormData ? {} : { \"Content-Type\": \"application/json\" }),\n      },\n      params: params,\n    });\n\n    return response.data;\n  } catch (error) {\n    console.log(\"API Error: \", error);\n    return {\n      success: false,\n      message: error?.response?.data?.message || \"Something went wrong\",\n    };\n  }\n};\n"],"mappings":"AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,WAAW;;AAEpC;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAEH,QAAQ;EACjBI,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAC1BC,MAAM,EACNC,GAAG,EACHC,QAAQ,EACRC,OAAO,GAAG,CAAC,CAAC,EACZC,MAAM,GAAG,CAAC,CAAC,KACR;EACH,IAAI;IACF,MAAMC,UAAU,GAAGH,QAAQ,YAAYI,QAAQ;IAE/C,MAAMC,QAAQ,GAAG,MAAMb,aAAa,CAAC;MACnCM,MAAM,EAAEA,MAAM,CAACQ,WAAW,CAAC,CAAC;MAC5BP,GAAG,EAAEA,GAAG;MACRQ,IAAI,EAAEP,QAAQ;MACdC,OAAO,EAAE;QACP,GAAGA,OAAO;QACV,IAAIE,UAAU,GAAG,CAAC,CAAC,GAAG;UAAE,cAAc,EAAE;QAAmB,CAAC;MAC9D,CAAC;MACDD,MAAM,EAAEA;IACV,CAAC,CAAC;IAEF,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACdC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEJ,KAAK,CAAC;IACjC,OAAO;MACLK,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,CAAAN,KAAK,aAALA,KAAK,wBAAAC,eAAA,GAALD,KAAK,CAAEH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAfD,eAAA,CAAiBF,IAAI,cAAAG,oBAAA,uBAArBA,oBAAA,CAAuBI,OAAO,KAAI;IAC7C,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}