{"ast":null,"code":"/**\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('mdast').Root} MdastRoot\r\n * @typedef {import('mdast-util-to-hast').Options} Options\r\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\r\n *\r\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\r\n */\n\nimport { toHast } from 'mdast-util-to-hast';\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\r\n * Plugin that turns markdown into HTML to support rehype.\r\n *\r\n * *   If a destination processor is given, that processor runs with a new HTML\r\n *     (hast) tree (bridge-mode).\r\n *     As the given processor runs with a hast tree, and rehype plugins support\r\n *     hast, that means rehype plugins can be used with the given processor.\r\n *     The hast tree is discarded in the end.\r\n *     It’s highly unlikely that you want to do this.\r\n * *   The common case is to not pass a destination processor, in which case the\r\n *     current processor continues running with a new HTML (hast) tree\r\n *     (mutate-mode).\r\n *     As the current processor continues with a hast tree, and rehype plugins\r\n *     support hast, that means rehype plugins can be used after\r\n *     `remark-rehype`.\r\n *     It’s likely that this is what you want to do.\r\n *\r\n * @param destination\r\n *   Optional unified processor.\r\n * @param options\r\n *   Options passed to `mdast-util-to-hast`.\r\n */\nconst remarkRehype = /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n\nfunction (destination, options) {\n  return destination && 'run' in destination ? bridge(destination, options) : mutate(destination || options);\n};\nexport default remarkRehype;\n\n/**\r\n * Bridge-mode.\r\n * Runs the destination with the new hast tree.\r\n *\r\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\r\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, error => {\n      next(error);\n    });\n  };\n}\n\n/**\r\n * Mutate-mode.\r\n * Further plugins run on the hast tree.\r\n *\r\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\r\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return node => toHast(node, options);\n}","map":{"version":3,"names":["toHast","remarkRehype","destination","options","bridge","mutate","node","file","next","run","error"],"sources":["C:/Users/saura/Desktop/AlgoDevFreaks/node_modules/remark-rehype/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('hast').Root} HastRoot\r\n * @typedef {import('mdast').Root} MdastRoot\r\n * @typedef {import('mdast-util-to-hast').Options} Options\r\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\r\n *\r\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\r\n */\r\n\r\nimport {toHast} from 'mdast-util-to-hast'\r\n\r\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\r\n\r\n/**\r\n * Plugin that turns markdown into HTML to support rehype.\r\n *\r\n * *   If a destination processor is given, that processor runs with a new HTML\r\n *     (hast) tree (bridge-mode).\r\n *     As the given processor runs with a hast tree, and rehype plugins support\r\n *     hast, that means rehype plugins can be used with the given processor.\r\n *     The hast tree is discarded in the end.\r\n *     It’s highly unlikely that you want to do this.\r\n * *   The common case is to not pass a destination processor, in which case the\r\n *     current processor continues running with a new HTML (hast) tree\r\n *     (mutate-mode).\r\n *     As the current processor continues with a hast tree, and rehype plugins\r\n *     support hast, that means rehype plugins can be used after\r\n *     `remark-rehype`.\r\n *     It’s likely that this is what you want to do.\r\n *\r\n * @param destination\r\n *   Optional unified processor.\r\n * @param options\r\n *   Options passed to `mdast-util-to-hast`.\r\n */\r\nconst remarkRehype =\r\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\r\n  (\r\n    function (destination, options) {\r\n      return destination && 'run' in destination\r\n        ? bridge(destination, options)\r\n        : mutate(destination || options)\r\n    }\r\n  )\r\n\r\nexport default remarkRehype\r\n\r\n/**\r\n * Bridge-mode.\r\n * Runs the destination with the new hast tree.\r\n *\r\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\r\n */\r\nfunction bridge(destination, options) {\r\n  return (node, file, next) => {\r\n    destination.run(toHast(node, options), file, (error) => {\r\n      next(error)\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Mutate-mode.\r\n * Further plugins run on the hast tree.\r\n *\r\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\r\n */\r\nfunction mutate(options) {\r\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\r\n  return (node) => toHast(node, options)\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,MAAM,QAAO,oBAAoB;;AAEzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAChB;;AAEE,SAAAA,CAAUC,WAAW,EAAEC,OAAO,EAAE;EAC9B,OAAOD,WAAW,IAAI,KAAK,IAAIA,WAAW,GACtCE,MAAM,CAACF,WAAW,EAAEC,OAAO,CAAC,GAC5BE,MAAM,CAACH,WAAW,IAAIC,OAAO,CAAC;AACpC,CACD;AAEH,eAAeF,YAAY;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,MAAMA,CAACF,WAAW,EAAEC,OAAO,EAAE;EACpC,OAAO,CAACG,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAK;IAC3BN,WAAW,CAACO,GAAG,CAACT,MAAM,CAACM,IAAI,EAAEH,OAAO,CAAC,EAAEI,IAAI,EAAGG,KAAK,IAAK;MACtDF,IAAI,CAACE,KAAK,CAAC;IACb,CAAC,CAAC;EACJ,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,MAAMA,CAACF,OAAO,EAAE;EACvB;EACA,OAAQG,IAAI,IAAKN,MAAM,CAACM,IAAI,EAAEH,OAAO,CAAC;AACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}