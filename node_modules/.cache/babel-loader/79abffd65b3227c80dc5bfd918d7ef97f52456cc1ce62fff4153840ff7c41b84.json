{"ast":null,"code":"import axios from \"axios\";\n\n// 1. Axios इंस्टेंस कॉन्फिगरेशन में महत्वपूर्ण सुधार\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || \"http://localhost:4000\",\n  // Fallback URL\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  withCredentials: true,\n  // CORS के लिए आवश्यक\n  timeout: 10000 // 10 सेकंड का timeout\n});\n\n// 2. बेहतर एरर हैंडलिंग के साथ apiConnector\nexport const apiConnector = async (method, url, bodyData, headers, params) => {\n  try {\n    const response = await axiosInstance({\n      method: method.toUpperCase(),\n      // METHOD को uppercase में बदलें\n      url: url,\n      data: bodyData || undefined,\n      // null के बजाय undefined\n      headers: headers ? {\n        ...axiosInstance.defaults.headers,\n        ...headers\n      } : axiosInstance.defaults.headers,\n      params: params || undefined\n    });\n    return response.data;\n  } catch (error) {\n    // 3. विस्तृत एरर हैंडलिंग\n    let errorMessage = \"API Request Failed\";\n    let errorDetails = {};\n    if (error.response) {\n      var _error$response$data;\n      // सर्वर ने 4xx/5xx रिस्पॉन्स दिया\n      errorDetails = {\n        status: error.response.status,\n        data: error.response.data,\n        headers: error.response.headers\n      };\n      errorMessage = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || `Server responded with status ${error.response.status}`;\n    } else if (error.request) {\n      // रिक्वेस्ट भेजी गई लेकिन कोई रिस्पॉन्स नहीं मिला\n      errorDetails = {\n        request: error.request\n      };\n      errorMessage = \"No response received from server\";\n    } else {\n      // रिक्वेस्ट सेटअप में समस्या\n      errorDetails = {\n        message: error.message\n      };\n      errorMessage = \"Error setting up API request\";\n    }\n    console.error(\"API Error Details:\", {\n      url,\n      method,\n      error: errorMessage,\n      details: errorDetails\n    });\n\n    // 4. स्टैंडर्डाइज्ड एरर ऑब्जेक्ट throw करें\n    const apiError = new Error(errorMessage);\n    apiError.details = errorDetails;\n    apiError.isAxiosError = true;\n    throw apiError;\n  }\n};\n\n// 5. इंटरसेप्टर्स जोड़ें (वैकल्पिक)\naxiosInstance.interceptors.request.use(config => {\n  console.log(\"Request Interceptor:\", config);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(response => {\n  console.log(\"Response Interceptor:\", response);\n  return response;\n}, error => {\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","process","env","REACT_APP_API_BASE_URL","headers","withCredentials","timeout","apiConnector","method","url","bodyData","params","response","toUpperCase","data","undefined","defaults","error","errorMessage","errorDetails","_error$response$data","status","message","request","console","details","apiError","Error","isAxiosError","interceptors","use","config","log","Promise","reject"],"sources":["C:/Users/saura/Desktop/StudyNotion-An-Online-Education-Platform-master/src/services/apiconnector.js"],"sourcesContent":["import axios from \"axios\";\n\n// 1. Axios इंस्टेंस कॉन्फिगरेशन में महत्वपूर्ण सुधार\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL || \"http://localhost:4000\", // Fallback URL\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  withCredentials: true, // CORS के लिए आवश्यक\n  timeout: 10000, // 10 सेकंड का timeout\n});\n\n// 2. बेहतर एरर हैंडलिंग के साथ apiConnector\nexport const apiConnector = async (method, url, bodyData, headers, params) => {\n  try {\n    const response = await axiosInstance({\n      method: method.toUpperCase(), // METHOD को uppercase में बदलें\n      url: url,\n      data: bodyData || undefined, // null के बजाय undefined\n      headers: headers ? { ...axiosInstance.defaults.headers, ...headers } : axiosInstance.defaults.headers,\n      params: params || undefined,\n    });\n    return response.data;\n  } catch (error) {\n    // 3. विस्तृत एरर हैंडलिंग\n    let errorMessage = \"API Request Failed\";\n    let errorDetails = {};\n\n    if (error.response) {\n      // सर्वर ने 4xx/5xx रिस्पॉन्स दिया\n      errorDetails = {\n        status: error.response.status,\n        data: error.response.data,\n        headers: error.response.headers,\n      };\n      errorMessage = error.response.data?.message || `Server responded with status ${error.response.status}`;\n    } else if (error.request) {\n      // रिक्वेस्ट भेजी गई लेकिन कोई रिस्पॉन्स नहीं मिला\n      errorDetails = { request: error.request };\n      errorMessage = \"No response received from server\";\n    } else {\n      // रिक्वेस्ट सेटअप में समस्या\n      errorDetails = { message: error.message };\n      errorMessage = \"Error setting up API request\";\n    }\n\n    console.error(\"API Error Details:\", {\n      url,\n      method,\n      error: errorMessage,\n      details: errorDetails,\n    });\n\n    // 4. स्टैंडर्डाइज्ड एरर ऑब्जेक्ट throw करें\n    const apiError = new Error(errorMessage);\n    apiError.details = errorDetails;\n    apiError.isAxiosError = true;\n    throw apiError;\n  }\n};\n\n// 5. इंटरसेप्टर्स जोड़ें (वैकल्पिक)\naxiosInstance.interceptors.request.use(config => {\n  console.log(\"Request Interceptor:\", config);\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\naxiosInstance.interceptors.response.use(response => {\n  console.log(\"Response Interceptor:\", response);\n  return response;\n}, error => {\n  return Promise.reject(error);\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}