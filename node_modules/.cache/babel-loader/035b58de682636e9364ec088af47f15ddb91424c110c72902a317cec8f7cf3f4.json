{"ast":null,"code":"/**\r\n * Check if the given value is *inter-element whitespace*.\r\n *\r\n * @param {unknown} thing\r\n *   Thing to check (typically `Node` or `string`).\r\n * @returns {boolean}\r\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\r\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\r\n *   (`\\r`), or form feed (`\\f`).\r\n *   If a node is passed it must be a `Text` node, whose `value` field is\r\n *   checked.\r\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n  // @ts-expect-error looks like a node.\n  thing && typeof thing === 'object' && thing.type === 'text' ?\n  // @ts-expect-error looks like a text.\n  thing.value || '' : thing;\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === '';\n}","map":{"version":3,"names":["whitespace","thing","value","type","replace"],"sources":["C:/Users/saura/Desktop/AlgoDevFreaks/node_modules/hast-util-whitespace/index.js"],"sourcesContent":["/**\r\n * Check if the given value is *inter-element whitespace*.\r\n *\r\n * @param {unknown} thing\r\n *   Thing to check (typically `Node` or `string`).\r\n * @returns {boolean}\r\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\r\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\r\n *   (`\\r`), or form feed (`\\f`).\r\n *   If a node is passed it must be a `Text` node, whose `value` field is\r\n *   checked.\r\n */\r\nexport function whitespace(thing) {\r\n  /** @type {string} */\r\n  const value =\r\n    // @ts-expect-error looks like a node.\r\n    thing && typeof thing === 'object' && thing.type === 'text'\r\n      ? // @ts-expect-error looks like a text.\r\n        thing.value || ''\r\n      : thing\r\n\r\n  // HTML whitespace expression.\r\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\r\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,KAAK,EAAE;EAChC;EACA,MAAMC,KAAK;EACT;EACAD,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACE,IAAI,KAAK,MAAM;EACvD;EACAF,KAAK,CAACC,KAAK,IAAI,EAAE,GACjBD,KAAK;;EAEX;EACA;EACA,OAAO,OAAOC,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACE,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,KAAK,EAAE;AAC9E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}