{"ast":null,"code":"/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').Definition} Definition\r\n */\n\n/**\r\n * @typedef {Root | Content} Node\r\n *\r\n * @callback GetDefinition\r\n *   Get a definition by identifier.\r\n * @param {string | null | undefined} [identifier]\r\n *   Identifier of definition.\r\n * @returns {Definition | null}\r\n *   Definition corresponding to `identifier` or `null`.\r\n */\n\nimport { visit } from 'unist-util-visit';\nconst own = {}.hasOwnProperty;\n\n/**\r\n * Find definitions in `tree`.\r\n *\r\n * Uses CommonMark precedence, which means that earlier definitions are\r\n * preferred over duplicate later definitions.\r\n *\r\n * @param {Node} tree\r\n *   Tree to check.\r\n * @returns {GetDefinition}\r\n *   Getter.\r\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null);\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node');\n  }\n  visit(tree, 'definition', definition => {\n    const id = clean(definition.identifier);\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition;\n    }\n  });\n  return definition;\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier);\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null;\n  }\n}\n\n/**\r\n * @param {string | null | undefined} [value]\r\n * @returns {string}\r\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase();\n}","map":{"version":3,"names":["visit","own","hasOwnProperty","definitions","tree","cache","Object","create","type","Error","definition","id","clean","identifier","call","value","String","toUpperCase"],"sources":["C:/Users/saura/Desktop/AlgoDevFreaks/node_modules/mdast-util-definitions/lib/index.js"],"sourcesContent":["/**\r\n * @typedef {import('mdast').Root} Root\r\n * @typedef {import('mdast').Content} Content\r\n * @typedef {import('mdast').Definition} Definition\r\n */\r\n\r\n/**\r\n * @typedef {Root | Content} Node\r\n *\r\n * @callback GetDefinition\r\n *   Get a definition by identifier.\r\n * @param {string | null | undefined} [identifier]\r\n *   Identifier of definition.\r\n * @returns {Definition | null}\r\n *   Definition corresponding to `identifier` or `null`.\r\n */\r\n\r\nimport {visit} from 'unist-util-visit'\r\n\r\nconst own = {}.hasOwnProperty\r\n\r\n/**\r\n * Find definitions in `tree`.\r\n *\r\n * Uses CommonMark precedence, which means that earlier definitions are\r\n * preferred over duplicate later definitions.\r\n *\r\n * @param {Node} tree\r\n *   Tree to check.\r\n * @returns {GetDefinition}\r\n *   Getter.\r\n */\r\nexport function definitions(tree) {\r\n  /** @type {Record<string, Definition>} */\r\n  const cache = Object.create(null)\r\n\r\n  if (!tree || !tree.type) {\r\n    throw new Error('mdast-util-definitions expected node')\r\n  }\r\n\r\n  visit(tree, 'definition', (definition) => {\r\n    const id = clean(definition.identifier)\r\n    if (id && !own.call(cache, id)) {\r\n      cache[id] = definition\r\n    }\r\n  })\r\n\r\n  return definition\r\n\r\n  /** @type {GetDefinition} */\r\n  function definition(identifier) {\r\n    const id = clean(identifier)\r\n    // To do: next major: return `undefined` when not found.\r\n    return id && own.call(cache, id) ? cache[id] : null\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string | null | undefined} [value]\r\n * @returns {string}\r\n */\r\nfunction clean(value) {\r\n  return String(value || '').toUpperCase()\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,KAAK,QAAO,kBAAkB;AAEtC,MAAMC,GAAG,GAAG,CAAC,CAAC,CAACC,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAAE;EAChC;EACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAEjC,IAAI,CAACH,IAAI,IAAI,CAACA,IAAI,CAACI,IAAI,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACzD;EAEAT,KAAK,CAACI,IAAI,EAAE,YAAY,EAAGM,UAAU,IAAK;IACxC,MAAMC,EAAE,GAAGC,KAAK,CAACF,UAAU,CAACG,UAAU,CAAC;IACvC,IAAIF,EAAE,IAAI,CAACV,GAAG,CAACa,IAAI,CAACT,KAAK,EAAEM,EAAE,CAAC,EAAE;MAC9BN,KAAK,CAACM,EAAE,CAAC,GAAGD,UAAU;IACxB;EACF,CAAC,CAAC;EAEF,OAAOA,UAAU;;EAEjB;EACA,SAASA,UAAUA,CAACG,UAAU,EAAE;IAC9B,MAAMF,EAAE,GAAGC,KAAK,CAACC,UAAU,CAAC;IAC5B;IACA,OAAOF,EAAE,IAAIV,GAAG,CAACa,IAAI,CAACT,KAAK,EAAEM,EAAE,CAAC,GAAGN,KAAK,CAACM,EAAE,CAAC,GAAG,IAAI;EACrD;AACF;;AAEA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACG,KAAK,EAAE;EACpB,OAAOC,MAAM,CAACD,KAAK,IAAI,EAAE,CAAC,CAACE,WAAW,CAAC,CAAC;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}